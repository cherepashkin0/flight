# parquet_to_clickhouse.py
import pandas as pd
import clickhouse_connect
import os

def map_dtype_to_clickhouse(dtype: str, nullable: bool, min_val=None, max_val=None) -> str:
    """ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç pandas dtype –≤ ClickHouse —Ç–∏–ø, –≤–∫–ª—é—á–∞—è Nullable, —Å —É—á–µ—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π """
    ch_type = "String"  # fallback –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if dtype.startswith('int'):
        if min_val is not None and max_val is not None:
            if 0 <= min_val and max_val <= 255:
                ch_type = 'UInt8'
            elif -128 <= min_val <= max_val <= 127:
                ch_type = 'Int8'
            elif -32768 <= min_val <= max_val <= 32767:
                ch_type = 'Int16'
            elif -2**31 <= min_val <= max_val <= 2**31 - 1:
                ch_type = 'Int32'
            else:
                ch_type = 'Int64'
        else:
            ch_type = 'Int64'

    elif dtype.startswith('float'):
        ch_type = 'Float32' if max_val is not None and abs(max_val) < 1e38 else 'Float64'

    elif dtype == 'bool':
        ch_type = 'UInt8'

    elif dtype.startswith('datetime'):
        ch_type = 'DateTime'

    elif dtype == 'object' or dtype == 'string' or dtype == 'category':
        ch_type = 'String'

    return f'Nullable({ch_type})' if nullable else ch_type


# –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_name = 'flights_data'

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse
client = clickhouse_connect.get_client(
    host=os.getenv('CLICKHOUSE_HOST'),
    port=os.getenv('CLICKHOUSE_PORT'),
    username=os.getenv('CLICKHOUSE_USER'),
    password=os.getenv('CLICKHOUSE_PASSWORD')
)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
client.command(f'CREATE DATABASE IF NOT EXISTS {db_name}')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–æ–¥–∞–º
for year in range(2018, 2023):
    parquet_path = f'flight_delay/Combined_Flights_{year}.parquet'
    print(f'üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {parquet_path}')
    
    df = pd.read_parquet(parquet_path)
    table_name = f'{db_name}.flight_{year}'

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ClickHouse-—Ç–∏–ø –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
    column_definitions = []
    for col in df.columns:
        sanitized_col = col.replace(' ', '_')
        df.rename(columns={col: sanitized_col}, inplace=True)

        series = df[sanitized_col]
        dtype = str(series.dtype)
        nullable = series.isnull().any()

        min_val = series.min(skipna=True) if pd.api.types.is_numeric_dtype(series) else None
        max_val = series.max(skipna=True) if pd.api.types.is_numeric_dtype(series) else None

        ch_type = map_dtype_to_clickhouse(dtype, nullable, min_val, max_val)
        column_definitions.append(f"`{sanitized_col}` {ch_type}")

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    client.command(f'DROP TABLE IF EXISTS {table_name}')

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    create_query = f'''
    CREATE TABLE {table_name} (
        {', '.join(column_definitions)}
    ) ENGINE = MergeTree()
    ORDER BY tuple()
    '''
    client.command(create_query)

    # –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ None, —á—Ç–æ–±—ã ClickHouse –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª Nullable
    df = df.where(pd.notnull(df), None)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    client.insert_df(table_name, df)

    print(f'‚úÖ –ì–æ–¥ {year}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}')
